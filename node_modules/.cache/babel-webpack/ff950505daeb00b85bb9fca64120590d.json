{"ast":null,"code":"import * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport * as i4 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i3 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/material/form-field';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n\nfunction MatPaginator_div_2_mat_form_field_3_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const pageSizeOption_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", pageSizeOption_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", pageSizeOption_r6, \" \");\n  }\n}\n\nfunction MatPaginator_div_2_mat_form_field_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-form-field\", 16);\n    i0.ɵɵelementStart(1, \"mat-select\", 17);\n    i0.ɵɵlistener(\"selectionChange\", function MatPaginator_div_2_mat_form_field_3_Template_mat_select_selectionChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7._changePageSize($event.value);\n    });\n    i0.ɵɵtemplate(2, MatPaginator_div_2_mat_form_field_3_mat_option_2_Template, 2, 2, \"mat-option\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"appearance\", ctx_r3._formFieldAppearance)(\"color\", ctx_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", ctx_r3.pageSize)(\"disabled\", ctx_r3.disabled)(\"panelClass\", ctx_r3.selectConfig.panelClass || \"\")(\"disableOptionCentering\", ctx_r3.selectConfig.disableOptionCentering)(\"aria-label\", ctx_r3._intl.itemsPerPageLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3._displayedPageSizeOptions);\n  }\n}\n\nfunction MatPaginator_div_2_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.pageSize);\n  }\n}\n\nfunction MatPaginator_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵelementStart(1, \"div\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, MatPaginator_div_2_mat_form_field_3_Template, 3, 8, \"mat-form-field\", 14);\n    i0.ɵɵtemplate(4, MatPaginator_div_2_div_4_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0._intl.itemsPerPageLabel, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length > 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._displayedPageSizeOptions.length <= 1);\n  }\n}\n\nfunction MatPaginator_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function MatPaginator_button_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.firstPage();\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 7);\n    i0.ɵɵelement(2, \"path\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r1._intl.firstPageLabel)(\"matTooltipDisabled\", ctx_r1._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r1._previousButtonsDisabled());\n    i0.ɵɵattribute(\"aria-label\", ctx_r1._intl.firstPageLabel);\n  }\n}\n\nfunction MatPaginator_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"button\", 23);\n    i0.ɵɵlistener(\"click\", function MatPaginator_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.lastPage();\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 7);\n    i0.ɵɵelement(2, \"path\", 24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"matTooltip\", ctx_r2._intl.lastPageLabel)(\"matTooltipDisabled\", ctx_r2._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx_r2._nextButtonsDisabled());\n    i0.ɵɵattribute(\"aria-label\", ctx_r2._intl.lastPageLabel);\n  }\n}\n\nclass MatPaginatorIntl {\n  constructor() {\n    /**\n     * Stream to emit from when labels are changed. Use this to notify components when the labels have\n     * changed after initialization.\n     */\n    this.changes = new Subject();\n    /** A label for the page size selector. */\n\n    this.itemsPerPageLabel = 'Items per page:';\n    /** A label for the button that increments the current page. */\n\n    this.nextPageLabel = 'Next page';\n    /** A label for the button that decrements the current page. */\n\n    this.previousPageLabel = 'Previous page';\n    /** A label for the button that moves to the first page. */\n\n    this.firstPageLabel = 'First page';\n    /** A label for the button that moves to the last page. */\n\n    this.lastPageLabel = 'Last page';\n    /** A label for the range of items within the current page and the length of the whole list. */\n\n    this.getRangeLabel = (page, pageSize, length) => {\n      if (length == 0 || pageSize == 0) {\n        return `0 of ${length}`;\n      }\n\n      length = Math.max(length, 0);\n      const startIndex = page * pageSize; // If the start index exceeds the list length, do not try and fix the end index to the end.\n\n      const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n      return `${startIndex + 1} – ${endIndex} of ${length}`;\n    };\n  }\n\n}\n\nMatPaginatorIntl.ɵfac = function MatPaginatorIntl_Factory(t) {\n  return new (t || MatPaginatorIntl)();\n};\n\nMatPaginatorIntl.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatPaginatorIntl,\n  factory: MatPaginatorIntl.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginatorIntl, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/** @docs-private */\n\n\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\n\n\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** The default page size if there is no page size and there are no provided page size options. */\n\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\n\nclass PageEvent {}\n/** Injection token that can be used to provide the default options for the paginator module. */\n\n\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS'); // Boilerplate for applying mixins to _MatPaginatorBase.\n\n/** @docs-private */\n\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\n\n\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n  constructor(_intl, _changeDetectorRef, defaults) {\n    super();\n    this._intl = _intl;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._pageIndex = 0;\n    this._length = 0;\n    this._pageSizeOptions = [];\n    this._hidePageSize = false;\n    this._showFirstLastButtons = false;\n    /** Used to configure the underlying `MatSelect` inside the paginator. */\n\n    this.selectConfig = {};\n    /** Event emitted when the paginator changes the page size or page index. */\n\n    this.page = new EventEmitter();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n\n    if (defaults) {\n      const {\n        pageSize,\n        pageSizeOptions,\n        hidePageSize,\n        showFirstLastButtons\n      } = defaults;\n\n      if (pageSize != null) {\n        this._pageSize = pageSize;\n      }\n\n      if (pageSizeOptions != null) {\n        this._pageSizeOptions = pageSizeOptions;\n      }\n\n      if (hidePageSize != null) {\n        this._hidePageSize = hidePageSize;\n      }\n\n      if (showFirstLastButtons != null) {\n        this._showFirstLastButtons = showFirstLastButtons;\n      }\n    }\n  }\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n\n\n  get pageIndex() {\n    return this._pageIndex;\n  }\n\n  set pageIndex(value) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n\n\n  get length() {\n    return this._length;\n  }\n\n  set length(value) {\n    this._length = coerceNumberProperty(value);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Number of items to display on a page. By default set to 50. */\n\n\n  get pageSize() {\n    return this._pageSize;\n  }\n\n  set pageSize(value) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** The set of provided page size options to display to the user. */\n\n\n  get pageSizeOptions() {\n    return this._pageSizeOptions;\n  }\n\n  set pageSizeOptions(value) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n\n    this._updateDisplayedPageSizeOptions();\n  }\n  /** Whether to hide the page size selection UI from the user. */\n\n\n  get hidePageSize() {\n    return this._hidePageSize;\n  }\n\n  set hidePageSize(value) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  /** Whether to show the first/last buttons UI to the user. */\n\n\n  get showFirstLastButtons() {\n    return this._showFirstLastButtons;\n  }\n\n  set showFirstLastButtons(value) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n\n    this._updateDisplayedPageSizeOptions();\n\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n  /** Advances to the next page if it exists. */\n\n\n  nextPage() {\n    if (!this.hasNextPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.pageIndex + 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move back to the previous page if it exists. */\n\n\n  previousPage() {\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.pageIndex - 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the first page if not already there. */\n\n\n  firstPage() {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Move to the last page if not already there. */\n\n\n  lastPage() {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) {\n      return;\n    }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Whether there is a previous page. */\n\n\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n  /** Whether there is a next page. */\n\n\n  hasNextPage() {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n  /** Calculate the number of pages */\n\n\n  getNumberOfPages() {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n\n\n  _changePageSize(pageSize) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n\n    this._emitPageEvent(previousPageIndex);\n  }\n  /** Checks whether the buttons for going forwards should be disabled. */\n\n\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n  /** Checks whether the buttons for going backwards should be disabled. */\n\n\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n\n\n  _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) {\n      return;\n    } // If no page size is provided, use the first page size option or the default page size.\n\n\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    } // Sort the numbers using a number-specific sort function.\n\n\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n\n\n  _emitPageEvent(previousPageIndex) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n\n}\n\n_MatPaginatorBase.ɵfac = function _MatPaginatorBase_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\n_MatPaginatorBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatPaginatorBase,\n  inputs: {\n    color: \"color\",\n    pageIndex: \"pageIndex\",\n    length: \"length\",\n    pageSize: \"pageSize\",\n    pageSizeOptions: \"pageSizeOptions\",\n    hidePageSize: \"hidePageSize\",\n    showFirstLastButtons: \"showFirstLastButtons\",\n    selectConfig: \"selectConfig\"\n  },\n  outputs: {\n    page: \"page\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatPaginatorBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: MatPaginatorIntl\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    pageIndex: [{\n      type: Input\n    }],\n    length: [{\n      type: Input\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    pageSizeOptions: [{\n      type: Input\n    }],\n    hidePageSize: [{\n      type: Input\n    }],\n    showFirstLastButtons: [{\n      type: Input\n    }],\n    selectConfig: [{\n      type: Input\n    }],\n    page: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n\n\nclass MatPaginator extends _MatPaginatorBase {\n  constructor(intl, changeDetectorRef, defaults) {\n    super(intl, changeDetectorRef, defaults);\n\n    if (defaults && defaults.formFieldAppearance != null) {\n      this._formFieldAppearance = defaults.formFieldAppearance;\n    }\n  }\n\n}\n\nMatPaginator.ɵfac = function MatPaginator_Factory(t) {\n  return new (t || MatPaginator)(i0.ɵɵdirectiveInject(MatPaginatorIntl), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_PAGINATOR_DEFAULT_OPTIONS, 8));\n};\n\nMatPaginator.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatPaginator,\n  selectors: [[\"mat-paginator\"]],\n  hostAttrs: [\"role\", \"group\", 1, \"mat-paginator\"],\n  inputs: {\n    disabled: \"disabled\"\n  },\n  exportAs: [\"matPaginator\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 14,\n  vars: 14,\n  consts: [[1, \"mat-paginator-outer-container\"], [1, \"mat-paginator-container\"], [\"class\", \"mat-paginator-page-size\", 4, \"ngIf\"], [1, \"mat-paginator-range-actions\"], [1, \"mat-paginator-range-label\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-previous\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", 1, \"mat-paginator-icon\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-next\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", \"class\", \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\", 4, \"ngIf\"], [1, \"mat-paginator-page-size\"], [1, \"mat-paginator-page-size-label\"], [\"class\", \"mat-paginator-page-size-select\", 3, \"appearance\", \"color\", 4, \"ngIf\"], [\"class\", \"mat-paginator-page-size-value\", 4, \"ngIf\"], [1, \"mat-paginator-page-size-select\", 3, \"appearance\", \"color\"], [3, \"value\", \"disabled\", \"panelClass\", \"disableOptionCentering\", \"aria-label\", \"selectionChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"mat-paginator-page-size-value\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-first\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"], [\"mat-icon-button\", \"\", \"type\", \"button\", 1, \"mat-paginator-navigation-last\", 3, \"matTooltip\", \"matTooltipDisabled\", \"matTooltipPosition\", \"disabled\", \"click\"], [\"d\", \"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"]],\n  template: function MatPaginator_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵtemplate(2, MatPaginator_div_2_Template, 5, 3, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelementStart(4, \"div\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, MatPaginator_button_6_Template, 3, 5, \"button\", 5);\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_7_listener() {\n        return ctx.previousPage();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(8, \"svg\", 7);\n      i0.ɵɵelement(9, \"path\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(10, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function MatPaginator_Template_button_click_10_listener() {\n        return ctx.nextPage();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(11, \"svg\", 7);\n      i0.ɵɵelement(12, \"path\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, MatPaginator_button_13_Template, 3, 5, \"button\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", !ctx.hidePageSize);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" \", ctx._intl.getRangeLabel(ctx.pageIndex, ctx.pageSize, ctx.length), \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matTooltip\", ctx._intl.previousPageLabel)(\"matTooltipDisabled\", ctx._previousButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._previousButtonsDisabled());\n      i0.ɵɵattribute(\"aria-label\", ctx._intl.previousPageLabel);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"matTooltip\", ctx._intl.nextPageLabel)(\"matTooltipDisabled\", ctx._nextButtonsDisabled())(\"matTooltipPosition\", \"above\")(\"disabled\", ctx._nextButtonsDisabled());\n      i0.ɵɵattribute(\"aria-label\", ctx._intl.nextPageLabel);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.showFirstLastButtons);\n    }\n  },\n  directives: [i6.NgIf, i5.MatButton, i7.MatTooltip, i2.MatFormField, i3.MatSelect, i6.NgForOf, i4.MatOption],\n  styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginator, [{\n    type: Component,\n    args: [{\n      selector: 'mat-paginator',\n      exportAs: 'matPaginator',\n      inputs: ['disabled'],\n      host: {\n        'class': 'mat-paginator',\n        'role': 'group'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\",\n      styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: MatPaginatorIntl\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatPaginatorModule {}\n\nMatPaginatorModule.ɵfac = function MatPaginatorModule_Factory(t) {\n  return new (t || MatPaginatorModule)();\n};\n\nMatPaginatorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatPaginatorModule\n});\nMatPaginatorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n  imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPaginatorModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n      exports: [MatPaginator],\n      declarations: [MatPaginator],\n      providers: [MAT_PAGINATOR_INTL_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/kalisoft-front/kalyGame/node_modules/@angular/material/fesm2015/paginator.mjs"],"names":["i6","CommonModule","i0","Injectable","Optional","SkipSelf","InjectionToken","EventEmitter","Directive","Input","Output","Component","ChangeDetectionStrategy","ViewEncapsulation","Inject","NgModule","i4","mixinDisabled","mixinInitialized","MatCommonModule","i5","MatButtonModule","i3","MatSelectModule","i7","MatTooltipModule","coerceNumberProperty","coerceBooleanProperty","Subject","i2","MatPaginatorIntl","constructor","changes","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","endIndex","min","ɵfac","ɵprov","type","args","providedIn","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","useFactory","DEFAULT_PAGE_SIZE","PageEvent","MAT_PAGINATOR_DEFAULT_OPTIONS","_MatPaginatorMixinBase","_MatPaginatorBase","_intl","_changeDetectorRef","defaults","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","selectConfig","_intlChanges","subscribe","markForCheck","pageSizeOptions","hidePageSize","showFirstLastButtons","_pageSize","pageIndex","value","_updateDisplayedPageSizeOptions","map","p","ngOnInit","_initialized","_markInitialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","ceil","_changePageSize","floor","_nextButtonsDisabled","disabled","_previousButtonsDisabled","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","emit","ɵdir","ChangeDetectorRef","undefined","color","MatPaginator","intl","changeDetectorRef","formFieldAppearance","_formFieldAppearance","ɵcmp","NgIf","MatButton","MatTooltip","MatFormField","MatSelect","NgForOf","MatOption","selector","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","styles","decorators","MatPaginatorModule","ɵmod","ɵinj","imports","exports","declarations","providers"],"mappings":"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","sourcesContent":["import * as i6 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, NgModule } from '@angular/core';\nimport * as i4 from '@angular/material/core';\nimport { mixinDisabled, mixinInitialized, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/button';\nimport { MatButtonModule } from '@angular/material/button';\nimport * as i3 from '@angular/material/select';\nimport { MatSelectModule } from '@angular/material/select';\nimport * as i7 from '@angular/material/tooltip';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport * as i2 from '@angular/material/form-field';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nclass MatPaginatorIntl {\n    constructor() {\n        /**\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\n         * changed after initialization.\n         */\n        this.changes = new Subject();\n        /** A label for the page size selector. */\n        this.itemsPerPageLabel = 'Items per page:';\n        /** A label for the button that increments the current page. */\n        this.nextPageLabel = 'Next page';\n        /** A label for the button that decrements the current page. */\n        this.previousPageLabel = 'Previous page';\n        /** A label for the button that moves to the first page. */\n        this.firstPageLabel = 'First page';\n        /** A label for the button that moves to the last page. */\n        this.lastPageLabel = 'Last page';\n        /** A label for the range of items within the current page and the length of the whole list. */\n        this.getRangeLabel = (page, pageSize, length) => {\n            if (length == 0 || pageSize == 0) {\n                return `0 of ${length}`;\n            }\n            length = Math.max(length, 0);\n            const startIndex = page * pageSize;\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\n            const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\n        };\n    }\n}\nMatPaginatorIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatPaginatorIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatPaginatorIntl();\n}\n/** @docs-private */\nconst MAT_PAGINATOR_INTL_PROVIDER = {\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n    provide: MatPaginatorIntl,\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nclass PageEvent {\n}\n/** Injection token that can be used to provide the default options for the paginator module. */\nconst MAT_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('MAT_PAGINATOR_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to _MatPaginatorBase.\n/** @docs-private */\nconst _MatPaginatorMixinBase = mixinDisabled(mixinInitialized(class {\n}));\n/**\n * Base class with all of the `MatPaginator` functionality.\n * @docs-private\n */\nclass _MatPaginatorBase extends _MatPaginatorMixinBase {\n    constructor(_intl, _changeDetectorRef, defaults) {\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._pageIndex = 0;\n        this._length = 0;\n        this._pageSizeOptions = [];\n        this._hidePageSize = false;\n        this._showFirstLastButtons = false;\n        /** Used to configure the underlying `MatSelect` inside the paginator. */\n        this.selectConfig = {};\n        /** Event emitted when the paginator changes the page size or page index. */\n        this.page = new EventEmitter();\n        this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n        if (defaults) {\n            const { pageSize, pageSizeOptions, hidePageSize, showFirstLastButtons } = defaults;\n            if (pageSize != null) {\n                this._pageSize = pageSize;\n            }\n            if (pageSizeOptions != null) {\n                this._pageSizeOptions = pageSizeOptions;\n            }\n            if (hidePageSize != null) {\n                this._hidePageSize = hidePageSize;\n            }\n            if (showFirstLastButtons != null) {\n                this._showFirstLastButtons = showFirstLastButtons;\n            }\n        }\n    }\n    /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n    get pageIndex() {\n        return this._pageIndex;\n    }\n    set pageIndex(value) {\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The length of the total number of items that are being paginated. Defaulted to 0. */\n    get length() {\n        return this._length;\n    }\n    set length(value) {\n        this._length = coerceNumberProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Number of items to display on a page. By default set to 50. */\n    get pageSize() {\n        return this._pageSize;\n    }\n    set pageSize(value) {\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** The set of provided page size options to display to the user. */\n    get pageSizeOptions() {\n        return this._pageSizeOptions;\n    }\n    set pageSizeOptions(value) {\n        this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n        this._updateDisplayedPageSizeOptions();\n    }\n    /** Whether to hide the page size selection UI from the user. */\n    get hidePageSize() {\n        return this._hidePageSize;\n    }\n    set hidePageSize(value) {\n        this._hidePageSize = coerceBooleanProperty(value);\n    }\n    /** Whether to show the first/last buttons UI to the user. */\n    get showFirstLastButtons() {\n        return this._showFirstLastButtons;\n    }\n    set showFirstLastButtons(value) {\n        this._showFirstLastButtons = coerceBooleanProperty(value);\n    }\n    ngOnInit() {\n        this._initialized = true;\n        this._updateDisplayedPageSizeOptions();\n        this._markInitialized();\n    }\n    ngOnDestroy() {\n        this._intlChanges.unsubscribe();\n    }\n    /** Advances to the next page if it exists. */\n    nextPage() {\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex + 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move back to the previous page if it exists. */\n    previousPage() {\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.pageIndex - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the first page if not already there. */\n    firstPage() {\n        // hasPreviousPage being false implies at the start\n        if (!this.hasPreviousPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = 0;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Move to the last page if not already there. */\n    lastPage() {\n        // hasNextPage being false implies at the end\n        if (!this.hasNextPage()) {\n            return;\n        }\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = this.getNumberOfPages() - 1;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Whether there is a previous page. */\n    hasPreviousPage() {\n        return this.pageIndex >= 1 && this.pageSize != 0;\n    }\n    /** Whether there is a next page. */\n    hasNextPage() {\n        const maxPageIndex = this.getNumberOfPages() - 1;\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\n    }\n    /** Calculate the number of pages */\n    getNumberOfPages() {\n        if (!this.pageSize) {\n            return 0;\n        }\n        return Math.ceil(this.length / this.pageSize);\n    }\n    /**\n     * Changes the page size so that the first item displayed on the page will still be\n     * displayed using the new page size.\n     *\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n     * switching so that the page size is 5 will set the third page as the current page so\n     * that the 10th item will still be displayed.\n     */\n    _changePageSize(pageSize) {\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\n        // containing the previous page's first item.\n        const startIndex = this.pageIndex * this.pageSize;\n        const previousPageIndex = this.pageIndex;\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n        this.pageSize = pageSize;\n        this._emitPageEvent(previousPageIndex);\n    }\n    /** Checks whether the buttons for going forwards should be disabled. */\n    _nextButtonsDisabled() {\n        return this.disabled || !this.hasNextPage();\n    }\n    /** Checks whether the buttons for going backwards should be disabled. */\n    _previousButtonsDisabled() {\n        return this.disabled || !this.hasPreviousPage();\n    }\n    /**\n     * Updates the list of page size options to display to the user. Includes making sure that\n     * the page size is an option and that the list is sorted.\n     */\n    _updateDisplayedPageSizeOptions() {\n        if (!this._initialized) {\n            return;\n        }\n        // If no page size is provided, use the first page size option or the default page size.\n        if (!this.pageSize) {\n            this._pageSize =\n                this.pageSizeOptions.length != 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;\n        }\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n            this._displayedPageSizeOptions.push(this.pageSize);\n        }\n        // Sort the numbers using a number-specific sort function.\n        this._displayedPageSizeOptions.sort((a, b) => a - b);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n    _emitPageEvent(previousPageIndex) {\n        this.page.emit({\n            previousPageIndex,\n            pageIndex: this.pageIndex,\n            pageSize: this.pageSize,\n            length: this.length,\n        });\n    }\n}\n_MatPaginatorBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatPaginatorBase, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\n_MatPaginatorBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.2.0\", type: _MatPaginatorBase, inputs: { color: \"color\", pageIndex: \"pageIndex\", length: \"length\", pageSize: \"pageSize\", pageSizeOptions: \"pageSizeOptions\", hidePageSize: \"hidePageSize\", showFirstLastButtons: \"showFirstLastButtons\", selectConfig: \"selectConfig\" }, outputs: { page: \"page\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: _MatPaginatorBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined }]; }, propDecorators: { color: [{\n                type: Input\n            }], pageIndex: [{\n                type: Input\n            }], length: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], pageSizeOptions: [{\n                type: Input\n            }], hidePageSize: [{\n                type: Input\n            }], showFirstLastButtons: [{\n                type: Input\n            }], selectConfig: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nclass MatPaginator extends _MatPaginatorBase {\n    constructor(intl, changeDetectorRef, defaults) {\n        super(intl, changeDetectorRef, defaults);\n        if (defaults && defaults.formFieldAppearance != null) {\n            this._formFieldAppearance = defaults.formFieldAppearance;\n        }\n    }\n}\nMatPaginator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginator, deps: [{ token: MatPaginatorIntl }, { token: i0.ChangeDetectorRef }, { token: MAT_PAGINATOR_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatPaginator.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatPaginator, selector: \"mat-paginator\", inputs: { disabled: \"disabled\" }, host: { attributes: { \"role\": \"group\" }, classAttribute: \"mat-paginator\" }, exportAs: [\"matPaginator\"], usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"], components: [{ type: i2.MatFormField, selector: \"mat-form-field\", inputs: [\"color\", \"appearance\", \"hideRequiredMarker\", \"hintLabel\", \"floatLabel\"], exportAs: [\"matFormField\"] }, { type: i3.MatSelect, selector: \"mat-select\", inputs: [\"disabled\", \"disableRipple\", \"tabIndex\"], exportAs: [\"matSelect\"] }, { type: i4.MatOption, selector: \"mat-option\", exportAs: [\"matOption\"] }, { type: i5.MatButton, selector: \"button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]\", inputs: [\"disabled\", \"disableRipple\", \"color\"], exportAs: [\"matButton\"] }], directives: [{ type: i6.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i6.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i7.MatTooltip, selector: \"[matTooltip]\", exportAs: [\"matTooltip\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginator, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-paginator', exportAs: 'matPaginator', inputs: ['disabled'], host: {\n                        'class': 'mat-paginator',\n                        'role': 'group',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<div class=\\\"mat-paginator-outer-container\\\">\\n  <div class=\\\"mat-paginator-container\\\">\\n    <div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\">\\n      <div class=\\\"mat-paginator-page-size-label\\\">\\n        {{_intl.itemsPerPageLabel}}\\n      </div>\\n\\n      <mat-form-field\\n        *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\"\\n        [appearance]=\\\"_formFieldAppearance!\\\"\\n        [color]=\\\"color\\\"\\n        class=\\\"mat-paginator-page-size-select\\\">\\n        <mat-select\\n          [value]=\\\"pageSize\\\"\\n          [disabled]=\\\"disabled\\\"\\n          [panelClass]=\\\"selectConfig.panelClass || ''\\\"\\n          [disableOptionCentering]=\\\"selectConfig.disableOptionCentering\\\"\\n          [aria-label]=\\\"_intl.itemsPerPageLabel\\\"\\n          (selectionChange)=\\\"_changePageSize($event.value)\\\">\\n          <mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">\\n            {{pageSizeOption}}\\n          </mat-option>\\n        </mat-select>\\n      </mat-form-field>\\n\\n      <div\\n        class=\\\"mat-paginator-page-size-value\\\"\\n        *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div>\\n    </div>\\n\\n    <div class=\\\"mat-paginator-range-actions\\\">\\n      <div class=\\\"mat-paginator-range-label\\\">\\n        {{_intl.getRangeLabel(pageIndex, pageSize, length)}}\\n      </div>\\n\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-first\\\"\\n              (click)=\\\"firstPage()\\\"\\n              [attr.aria-label]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltip]=\\\"_intl.firstPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-previous\\\"\\n              (click)=\\\"previousPage()\\\"\\n              [attr.aria-label]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltip]=\\\"_intl.previousPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_previousButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-next\\\"\\n              (click)=\\\"nextPage()\\\"\\n              [attr.aria-label]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltip]=\\\"_intl.nextPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/>\\n        </svg>\\n      </button>\\n      <button mat-icon-button type=\\\"button\\\"\\n              class=\\\"mat-paginator-navigation-last\\\"\\n              (click)=\\\"lastPage()\\\"\\n              [attr.aria-label]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltip]=\\\"_intl.lastPageLabel\\\"\\n              [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\"\\n              [matTooltipPosition]=\\\"'above'\\\"\\n              [disabled]=\\\"_nextButtonsDisabled()\\\"\\n              *ngIf=\\\"showFirstLastButtons\\\">\\n        <svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\">\\n          <path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/>\\n        </svg>\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}.cdk-high-contrast-active .mat-paginator-icon{fill:CanvasText}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatPaginatorIntl }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_PAGINATOR_DEFAULT_OPTIONS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatPaginatorModule {\n}\nMatPaginatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatPaginatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, declarations: [MatPaginator], imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule], exports: [MatPaginator] });\nMatPaginatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, providers: [MAT_PAGINATOR_INTL_PROVIDER], imports: [[CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatPaginatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatButtonModule, MatSelectModule, MatTooltipModule, MatCommonModule],\n                    exports: [MatPaginator],\n                    declarations: [MatPaginator],\n                    providers: [MAT_PAGINATOR_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PAGINATOR_DEFAULT_OPTIONS, MAT_PAGINATOR_INTL_PROVIDER, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginator, MatPaginatorIntl, MatPaginatorModule, PageEvent, _MatPaginatorBase };\n"]},"metadata":{},"sourceType":"module"}