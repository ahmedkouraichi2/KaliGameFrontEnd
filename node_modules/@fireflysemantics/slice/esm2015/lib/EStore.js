import { AbstractStore } from './AbstractStore';
import { GUID } from './utilities';
import { ReplaySubject, of } from 'rxjs';
import { takeWhile, filter, switchMap } from 'rxjs/operators';
import { Slice } from './Slice';
/**
 * This `todoFactory` code will be used to illustrate the API examples.  The following
 * utilities are used in the tests and the API Typedoc examples contained here.
 * @example Utilities for API Examples
```
export const enum TodoSliceEnum {
  COMPLETE = "Complete",
  INCOMPLETE = "Incomplete"
}

export class Todo {
  constructor(public complete: boolean, public title: string,public gid?:string, public id?:string) {}
}

export let todos = [new Todo(false, "You complete me!"), new Todo(true, "You completed me!")];

export function todosFactory():Todo[] {
  return [new Todo(false, "You complete me!"), new Todo(true, "You completed me!")];
}
 ```
 */
export class EStore extends AbstractStore {
    /**
     * Store constructor (Initialization with element is optional)
     *
     * perform initial notification to all observers,
     * such that function like {@link combineLatest}{}
     * will execute at least once.
     * @param entities
     * @example Dynamic `EStore<Todo>` Creation
  ```
  // Initialize the Store
  let store: EStore<Todo> = new EStore<Todo>(todosFactory());
  ```*/
    constructor(entities = [], config) {
        super(config);
        /**
         * An Observable<E[]> reference so that
         *
         */
        this.observable = this.observe();
        /**
         * Notifies observers when the store is empty.
         */
        this.notifyActive = new ReplaySubject(1);
        /**
         * `Map` of active entties. The instance is public and can be used
         * directly to add and remove active entities, however we recommend
         * using the {@link addActive} and {@link deleteActive} methods.
         */
        this.active = new Map();
        /**
         * Notifies observers when the store is loading.
         *
         * This is a common pattern found when implementing
         * `Observable` data sources.
         */
        this.notifyLoading = new ReplaySubject(1);
        /**
         * The current loading state.  Use loading when fetching new
         * data for the store.  The default loading state is `true`.
         *
         * This is such that if data is fetched asynchronously
         * in a service, components can wait on loading notification
         * before attempting to retrieve data from the service.
         *
         * Loading could be based on a composite response.  For example
         * when the stock and mutual funds have loaded, set loading to `false`.
         */
        this._loading = true;
        /**
         * Notifies observers that a search is in progress.
         *
         * This is a common pattern found when implementing
         * `Observable` data sources.
         */
        this.notifySearching = new ReplaySubject(1);
        /**
         * The current `searching` state.  Use `searching`
         * for example to display a spinnner
         * when performing a search.
         * The default `searching` state is `false`.
         */
        this._searching = false;
        /**
         * Store slices
         */
        this.slices = new Map();
        const delta = { type: "Initialize" /* INTIALIZE */, entries: entities };
        this.post(entities);
        this.notifyDelta.next(delta);
    }
    /**
     * Calls complete on all {@link BehaviorSubject} instances.
     *
     * Call destroy when disposing of the store.
     */
    destroy() {
        super.destroy();
        this.notifyLoading.complete();
        this.notifyActive.complete();
        this.slices.forEach(slice => slice.destroy());
    }
    /**
     * Toggles the entity:
     *
     * If the store contains the entity
     * it will be deleted.  If the store
     * does not contains the entity,
     * it is added.
     * @param e
     * @example Toggle the `Todo` instance
  ```
  estore.post(todo);
  // Remove todo
  estore.toggle(todo);
  // Add it back
  estore.toggle(todo);
  
  ```
     */
    toggle(e) {
        if (this.contains(e)) {
            this.delete(e);
        }
        else {
            this.post(e);
        }
    }
    /**
     * Add multiple entity entities to active.
     *
     * If the entity is not contained in the store it is added
     * to the store before it is added to `active`.
     *
     * Also we clone the map prior to broadcasting it with
     * `notifyActive` to make sure we will trigger Angular
     * change detection in the event that it maintains
     * a reference to the `active` state `Map` instance.
     *
     * @example Add a `todo1` and `todo2` as active
  ```
  addActive(todo1);
  addActive(todo2);
  ```
     */
    addActive(e) {
        if (this.contains(e)) {
            this.active.set(e.gid, e);
            this.notifyActive.next(new Map(this.active));
        }
        else {
            this.post(e);
            this.active.set(e.gid, e);
            this.notifyActive.next(new Map(this.active));
        }
    }
    /**
     * Delete an entity as active.
     *
     * Also we clone the map prior to broadcasting it with
     * `notifyActive` to make sure we will trigger Angular
     * change detection in the event that it maintains
     * a reference to the `active` state `Map` instance.
     *
     * @example Mark a `todo` instance as active
    ```
  deleteActive(todo1);
  deleteActive(todo2);
    ```
     */
    deleteActive(e) {
        this.active.delete(e.gid);
        this.notifyActive.next(new Map(this.active));
    }
    /**
     * Clear / reset the active entity map.
     *
     * Also we clone the map prior to broadcasting it with
     * `notifyActive` to make sure we will trigger Angular
     * change detection in the event that it maintains
     * a reference to the `active` state `Map` instance.
     *
     * @example Mark a `todo` instance as active
    ```
  deleteActive(todo1);
  deleteActive(todo2);
    ```
     */
    clearActive() {
        this.active.clear();
        this.notifyActive.next(new Map(this.active));
    }
    /**
     * Observe the active entity.
     * @example
       <pre>
      let active$ = source.observeActive();
      </pre>
    */
    observeActive() {
        return this.notifyActive.asObservable();
    }
    /**
     * Sets the current loading state and notifies observers.
     */
    set loading(loading) {
        this._loading = loading;
        this.notifyLoading.next(this._loading);
    }
    /**
     * @return A snapshot of the loading state.
     */
    get loading() {
        return this._loading;
    }
    /**
     * Observe loading.
     * @example
       <pre>
      let loading$ = source.observeLoading();
      </pre>
  
      Note that this obverable piped through
      `takeWhile(v->v, true), such that it will
      complete after each emission.
  
      See:
      https://medium.com/@ole.ersoy/waiting-on-estore-to-load-8dcbe161613c
  
      For more details.
    */
    observeLoading() {
        return this.notifyLoading.asObservable().
            pipe(takeWhile(v => v, true));
    }
    /**
     * Notfiies when loading has completed.
     */
    observeLoadingComplete() {
        return this.observeLoading().pipe(filter(loading => loading == false), switchMap(() => of(true)));
    }
    /**
     * Sets the current searching state and notifies observers.
     */
    set searching(searching) {
        this._searching = searching;
        this.notifySearching.next(this._searching);
    }
    /**
     * @return A snapshot of the searching state.
     */
    get searching() {
        return this._searching;
    }
    /**
     * Observe searching.
     * @example
       <pre>
      let searching$ = source.observeSearching();
      </pre>
    
      Note that this obverable piped through
      `takeWhile(v->v, true), such that it will
      complete after each emission.
    
      See:
      https://medium.com/@ole.ersoy/waiting-on-estore-to-load-8dcbe161613c
    
      For more details.
    */
    observeSearching() {
        return this.notifySearching.asObservable().
            pipe(takeWhile(v => v, true));
    }
    /**
     * Notfiies when searching has completed.
     */
    observeSearchingComplete() {
        return this.observeSearching().pipe(filter(searching => searching == false), switchMap(() => of(true)));
    }
    /**
     * Adds a slice to the store and keys it by the slices label.
     *
     * @param p
     * @param label
     *
     * @example Setup a Todo Slice for COMPLETE Todos
  ```
  source.addSlice(todo => todo.complete, TodoSlices.COMPLETE);
  ```
     */
    addSlice(p, label) {
        const slice = new Slice(label, p, this);
        this.slices.set(slice.label, slice);
    }
    /**
     * Remove a slice
     * @param label The label identifying the slice
     *
     * @example Remove the TodoSlices.COMPLETE Slice
  ```
  source.removeSlice(TodoSlices.COMPLETE);
  ```
     */
    removeSlice(label) {
        this.slices.delete(label);
    }
    /**
     * Get a slice
     * @param label The label identifying the slice
     * @return The Slice instance or undefined
     *
     * @example Get the TodoSlices.COMPLETE slice
  ```
  source.getSlice(TodoSlices.COMPLETE);
  ```
     */
    getSlice(label) {
        return this.slices.get(label);
    }
    /**
     * Post (Add a new) element(s) to the store.
     * @param e An indiidual entity or an array of entities
     * @example Post a `todo`.
  ```
  store.post(todo);
  ```
     */
    post(e) {
        if (!Array.isArray(e)) {
            const guid = e[this.GUID_KEY]
                ? e[this.GUID_KEY]
                : GUID();
            e[this.GUID_KEY] = guid;
            this.entries.set(guid, e);
            this.updateIDEntry(e);
            Array.from(this.slices.values()).forEach(s => {
                s.post(e);
            });
            //Create a new array reference to trigger Angular change detection.
            let v = [...Array.from(this.entries.values())];
            const delta = { type: "Post" /* POST */, entries: [e] };
            this.notifyAll(v, delta);
        }
        else {
            this.postA(e);
        }
    }
    /**
     * Post elements to the store.
     * @param ...e
     * @example Post two `Todo` instances.
  ```
  store.post(todo1, todo2);
  ```
     */
    postN(...e) {
        e.forEach(e => {
            const guid = e[this.GUID_KEY]
                ? e[this.GUID_KEY]
                : GUID();
            e[this.GUID_KEY] = guid;
            this.entries.set(guid, e);
            this.updateIDEntry(e);
        });
        Array.from(this.slices.values()).forEach(s => {
            s.postA(e);
        });
        //Create a new array reference to trigger Angular change detection.
        let v = [...Array.from(this.entries.values())];
        const delta = { type: "Post" /* POST */, entries: e };
        this.notifyAll(v, delta);
    }
    /**
     * Post (Add) an array of elements to the store.
     * @param e
     * @example Post a `Todo` array.
  ```
  store.post([todo1, todo2]);
  ```
     */
    postA(e) {
        this.postN(...e);
    }
    /**
     * Put (Update) an element.
     * @param e
     * @example Put a Todo instance.
  ```
  store.put(todo1);
  ```
     */
    put(e) {
        if (!Array.isArray(e)) {
            let id = e[this.GUID_KEY];
            this.entries.set(id, e);
            this.updateIDEntry(e);
            let v = [...Array.from(this.entries.values())];
            this.notify.next(v);
            const delta = { type: "Put" /* PUT */, entries: [e] };
            this.notifyDelta.next(delta);
            Array.from(this.slices.values()).forEach(s => {
                s.put(e);
            });
        }
        else {
            this.putA(e);
        }
    }
    /**
     * Put (Update) an element or add an element that was read from a persistence source
     * and thus already has an assigned global id`.
     * @param e
     * @example Put Todo instances.
  ```
  store.put(todo1, todo2);
  ```
     */
    putN(...e) {
        this.putA(e);
    }
    /**
     * Put (Update) the array of elements.
     * @param e
     * @example Put Todo instances.
  ```
  store.put([todo1, todo2]);
  ```
     */
    putA(e) {
        e.forEach(e => {
            let guid = e[this.GUID_KEY];
            this.entries.set(guid, e);
            this.updateIDEntry(e);
        });
        //Create a new array reference to trigger Angular change detection.
        let v = [...Array.from(this.entries.values())];
        this.notify.next(v);
        const delta = { type: "Put" /* PUT */, entries: e };
        this.notifyDelta.next(delta);
        Array.from(this.slices.values()).forEach(s => {
            s.putA(e);
        });
    }
    /**
     * Delete (Update) the array of elements.
     * @param e
     * @example Delete todo1.
  ```
  store.delete(todo1]);
  ```
     */
    delete(e) {
        if (!Array.isArray(e)) {
            this.deleteActive(e);
            const guid = e[this.GUID_KEY];
            this.entries.delete(guid);
            this.deleteIDEntry(e);
            Array.from(this.slices.values()).forEach(s => {
                s.entries.delete(guid);
            });
            //Create a new array reference to trigger Angular change detection.
            let v = [...Array.from(this.entries.values())];
            const delta = { type: "Delete" /* DELETE */, entries: [e] };
            this.notifyAll(v, delta);
            Array.from(this.slices.values()).forEach(s => {
                s.delete(e);
            });
        }
        else {
            this.deleteA(e);
        }
    }
    /**
     * Delete N elements.
     * @param ...e
     * @example Put Todo instances.
  ```
  store.delete(todo1, todo2);
  ```
     */
    deleteN(...e) {
        this.deleteA(e);
    }
    /**
     * Delete N elements.
     * @param ...e
     * @example Put Todo instances.
  ```
  store.delete(todo1, todo2);
  ```
     */
    deleteA(e) {
        e.forEach(e => {
            this.deleteActive(e);
            const guid = e[this.GUID_KEY];
            this.entries.delete(guid);
            this.deleteIDEntry(e);
            Array.from(this.slices.values()).forEach(s => {
                s.entries.delete(guid);
            });
        });
        //Create a new array reference to trigger Angular change detection.
        let v = [...Array.from(this.entries.values())];
        const delta = { type: "Delete" /* DELETE */, entries: e };
        this.notifyAll(v, delta);
        Array.from(this.slices.values()).forEach(s => {
            s.deleteA(e);
        });
    }
    /**
     * Delete elements by {@link Predicate}.
     * @param p The predicate.
     * @example Put Todo instances.
  ```
  store.delete(todo1, todo2);
  ```
     */
    deleteP(p) {
        const d = [];
        Array.from(this.entries.values()).forEach(e => {
            if (p(e)) {
                d.push(e);
                const id = e[this.GUID_KEY];
                this.entries.delete(id);
                this.deleteActive(e);
                this.deleteIDEntry(e);
            }
        });
        //Create a new array reference to trigger Angular change detection.
        let v = [...Array.from(this.entries.values())];
        const delta = { type: "Delete" /* DELETE */, entries: d };
        this.notifyAll(v, delta);
        Array.from(this.slices.values()).forEach(s => {
            s.deleteA(d);
        });
    }
    /**
     * If the entity has the `id` key initialized with a value,
     * then also add the entity to the `idEntries`.
     *
     * @param e The element to be added to the `idEntries`.
     */
    updateIDEntry(e) {
        if (e[this.ID_KEY]) {
            this.idEntries.set(e[this.ID_KEY], e);
        }
    }
    /**
     * If the entity has the `id` key initialized with a value,
     * then also delete the entity to the `idEntries`.
     *
     * @param e The element to be added to the `idEntries`.
     */
    deleteIDEntry(e) {
        if (e[this.ID_KEY]) {
            this.idEntries.delete(e[this.ID_KEY]);
        }
    }
    /**
     * Resets the store and all contained slice instances to empty.
     * Also perform delta notification that sends all current store entries.
     * The ActionType.RESET code is sent with the delta notification.  Slices
     * send their own delta notification.
     *
     * @example Reset the store.
  ```
  store.reset();
  ```
     */
    reset() {
        const delta = {
            type: "Reset" /* RESET */,
            entries: Array.from(this.entries.values())
        };
        this.notifyAll([], delta);
        this.entries = new Map();
        Array.from(this.slices.values()).forEach(s => {
            s.reset();
        });
    }
    /**
     * Call all the notifiers at once.
     *
     * @param v
     * @param delta
     */
    notifyAll(v, delta) {
        super.notifyAll(v, delta);
        this.notifyLoading.next(this.loading);
    }
}
//# sourceMappingURL=data:application/json;base64,