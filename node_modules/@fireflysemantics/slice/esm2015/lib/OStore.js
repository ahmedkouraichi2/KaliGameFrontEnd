import { ReplaySubject } from 'rxjs';
export class OStore {
    constructor(start) {
        /**
         * Map of Key Value pair entries
         * containing values store in this store.
         */
        this.entries = new Map();
        /**
         * Map of replay subject id to `ReplaySubject` instance.
         */
        this.subjects = new Map();
        if (start) {
            this.S = start;
            const keys = Object.keys(start);
            keys.forEach((k) => {
                const ovr = start[k];
                this.post(ovr, ovr.value);
                ovr.obs = this.observe(ovr);
            });
        }
    }
    /**
     * Reset the state of the OStore to the
     * values or reset provided in the constructor
     * {@link OStoreStart} instance.
     */
    reset() {
        if (this.S) {
            const keys = Object.keys(this.S);
            keys.forEach((k) => {
                const ovr = this.S[k];
                this.put(ovr, ovr.reset ? ovr.reset : ovr.value);
            });
        }
    }
    /**
     * Clear all entries
     */
    clear() {
        this.entries.clear();
    }
    /**
     * Set create a key value pair entry and creates a
     * corresponding replay subject instance that will
     * be used to broadcast updates.
     *
     * @param key The key identifying the value
     * @param value The value
     */
    post(key, value) {
        this.entries.set(key, value);
        this.subjects.set(key, new ReplaySubject(1));
        //Emit immediately so that Observers can receive 
        //the value straight away.
        const subject = this.subjects.get(key);
        if (subject) {
            subject.next(value);
        }
    }
    /**
     * Update a value and notify subscribers.
     *
     * @param key
     * @param value
     */
    put(key, value) {
        this.entries.set(key, value);
        const subject = this.subjects.get(key);
        if (subject) {
            subject.next(value);
        }
    }
    /**
     * Deletes both the value entry and the corresponding {@link ReplaySubject}.
     * Will unsubscribe the {@link ReplaySubject} prior to deleting it,
     * severing communication with corresponding {@link Observable}s.
     *
     * @param key
     */
    delete(key) {
        this.entries.delete(key);
        this.subjects.delete(key);
        const subject = this.subjects.get(key);
        if (subject) {
            subject.unsubscribe();
        }
    }
    /**
     * Observe changes to the values.
     *
     * @param key
     * @return An {@link Observable} of the value
     */
    observe(key) {
        return this.subjects.get(key).asObservable();
    }
    /**
      * Check whether a value exists.
      *
      * @param key
      * @return True if the entry exists ( Is not null or undefined ) and false otherwise.
      */
    exists(key) {
        return this.entries.get(key) != null;
    }
    /**
     * Retrieve a snapshot of the
     * value.
     *
     * @param key
     * @return A snapshot of the value corresponding to the key.
     */
    snapshot(key) {
        return this.entries.get(key);
    }
    /**
     * Indicates whether the store is empty.
     * @return true if the store is empty, false otherwise.
     */
    isEmpty() {
        return Array.from(this.entries.values()).length == 0;
    }
    /**
     * Returns the number of key value pairs contained.
     *
     * @return the number of entries in the store.
     */
    count() {
        return Array.from(this.entries.values()).length;
    }
}
//# sourceMappingURL=data:application/json;base64,