import { AbstractStore } from "./AbstractStore";
const { isArray } = Array;
export class Slice extends AbstractStore {
    /**
     * perform initial notification to all observers,
     * such that operations like {@link combineLatest}{}
     * will execute at least once.
     *
     * @param label The slice label
     * @param predicate The slice predicate
     * @param eStore The EStore instance containing the elements considered for slicing
     *
     * @example
       <pre>
       //Empty slice
       new Slice<Todo>(Todo.COMPLETE, todo=>!todo.complete);
  
       //Initialized slice
       let todos = [new Todo(false, "You complete me!"),
                    new Todo(true, "You completed me!")];
       new Slice<Todo>(Todo.COMPLETE, todo=>!todo.complete, todos);
       </pre>
     */
    constructor(label, predicate, eStore) {
        super();
        this.label = label;
        this.predicate = predicate;
        this.eStore = eStore;
        /* The slice element entries */
        this.entries = new Map();
        const entities = eStore.allSnapshot();
        this.config = eStore.config;
        let passed = this.test(predicate, entities);
        const delta = { type: "Initialize" /* INTIALIZE */, entries: passed };
        this.post(passed);
        this.notifyDelta.next(delta);
    }
    /**
     * Add the element if it satisfies the predicate
     * and notify subscribers that an element was added.
     *
     * @param e The element to be considered for slicing
     */
    post(e) {
        if (isArray(e)) {
            this.postA(e);
        }
        else {
            if (this.predicate(e)) {
                const id = e[this.config.guidKey];
                this.entries.set(id, e);
                const delta = { type: "Post" /* POST */, entries: [e] };
                this.notifyAll([...Array.from(this.entries.values())], delta);
            }
        }
    }
    /**
     * Add the elements if they satisfy the predicate
     * and notify subscribers that elements were added.
     *
     * @param e The element to be considered for slicing
     */
    postN(...e) {
        this.postA(e);
    }
    /**
     * Add the elements if they satisfy the predicate
     * and notify subscribers that elements were added.
     *
     * @param e The element to be considered for slicing
     */
    postA(e) {
        const d = [];
        e.forEach(e => {
            if (this.predicate(e)) {
                const id = e[this.config.guidKey];
                this.entries.set(id, e);
                d.push(e);
            }
        });
        const delta = { type: "Post" /* POST */, entries: d };
        this.notifyAll([...Array.from(this.entries.values())], delta);
    }
    /**
     * Delete an element from the slice.
     *
     * @param e The element to be deleted if it satisfies the predicate
     */
    delete(e) {
        if (isArray(e)) {
            this.deleteA(e);
        }
        else {
            if (this.predicate(e)) {
                const id = e[this.config.guidKey];
                this.entries.delete(id);
                const delta = { type: "Delete" /* DELETE */, entries: [e] };
                this.notifyAll(Array.from(this.entries.values()), delta);
            }
        }
    }
    /**
     * @param e The elements to be deleted if it satisfies the predicate
     */
    deleteN(...e) {
        this.deleteA(e);
    }
    /**
     * @param e The elements to be deleted if they satisfy the predicate
     */
    deleteA(e) {
        const d = [];
        e.forEach(e => {
            if (this.predicate(e)) {
                const id = e[this.config.guidKey];
                d.push(this.entries.get(id));
                this.entries.delete(id);
            }
        });
        const delta = { type: "Delete" /* DELETE */, entries: d };
        this.notifyAll([...Array.from(this.entries.values())], delta);
    }
    /**
     * Update the slice when an Entity instance mutates.
     *
     * @param e The element to be added or deleted depending on predicate reevaluation
     */
    put(e) {
        if (isArray(e)) {
            this.putA(e);
        }
        else {
            const id = e[this.config.guidKey];
            if (this.entries.get(id)) {
                if (!this.predicate(e)) {
                    //Note that this is a ActionTypes.DELETE because we are removing the
                    //entity from the slice.
                    const delta = { type: "Delete" /* DELETE */, entries: [e] };
                    this.entries.delete(id);
                    this.notifyAll([...Array.from(this.entries.values())], delta);
                }
            }
            else if (this.predicate(e)) {
                this.entries.set(id, e);
                const delta = { type: "Put" /* PUT */, entries: [e] };
                this.notifyAll([...Array.from(this.entries.values())], delta);
            }
        }
    }
    /**
     * Update the slice with mutated Entity instances.
     *
     * @param e The elements to be deleted if it satisfies the predicate
     */
    putN(...e) {
        this.putA(e);
    }
    /**
     * @param e The elements to be put
     */
    putA(e) {
        const d = []; //instances to delete
        const u = []; //instances to update
        e.forEach(e => {
            const id = e[this.config.guidKey];
            if (this.entries.get(id)) {
                if (!this.predicate(e)) {
                    d.push(this.entries.get(id));
                }
            }
            else if (this.predicate(e)) {
                u.push(e);
            }
        });
        if (d.length > 0) {
            d.forEach(e => {
                this.entries.delete(e[this.config.guidKey]);
            });
            const delta = { type: "Delete" /* DELETE */, entries: d };
            this.notifyAll([...Array.from(this.entries.values())], delta);
        }
        if (u.length > 0) {
            u.forEach(e => {
                this.entries.set(e[this.config.guidKey], e);
            });
            const delta = { type: "Put" /* PUT */, entries: u };
            this.notifyAll([...Array.from(this.entries.values())], delta);
        }
    }
    /**
     * Resets the slice to empty.
     */
    reset() {
        let delta = {
            type: "Reset" /* RESET */,
            entries: [...Array.from(this.entries.values())]
        };
        this.notifyAll([], delta);
        this.entries = new Map();
    }
    /**
     * Utility method that applies the predicate to an array
     * of entities and return the ones that pass the test.
     *
     * Used to create an initial set of values
     * that should be part of the `Slice`.
     *
     * @param p
     * @param e
     * @return The the array of entities that pass the predicate test.
     */
    test(p, e) {
        let v = [];
        e.forEach((e) => {
            if (p(e)) {
                v.push(e);
            }
        });
        return v;
    }
}
//# sourceMappingURL=data:application/json;base64,